{"name":"JSON API","tagline":"A full-blown JSON API server, with documentation, generated automatically from your Nodejs app.","body":"json-api ![CircleCI Badge](https://circleci.com/gh/ethanresnick/json-api.png?0d6d9ba9db7f15eb6363c6fd93408526bef06035&style=shield)\r\n========\r\n\r\nThis library creates a [JSON API](http://jsonapi.org/)-compliant REST API from your Node app. And it generates API documentation automatically.\r\n\r\nIt currently integrates with [Express](http://expressjs.com/) apps that use [Mongoose](http://mongoosejs.com/) models, but it can easily be integrated with other frameworks and databases. If you want to see an integration with another stack, just open an issue!\r\n\r\n*Heads up:* The JSON-API spec isn't quite at version 1.0 yet, nor does this library yet implement the whole spec. In particular, some advanced routes do not work and the library's API is subject to change. That said, all the basic CRUD operations are supported and development is progressing very quickly. The goal is to have the entire spec implemented by the time the final JSON API spec is officially released.\r\n\r\n# Installation\r\n```$ npm install json-api```\r\n\r\n*On Versioning*: After the JSON API spec is finalized, this library's major version will be bumped to 3.0.0 and it will use semantic versioning going forward. Until then, the 2.x versions should be considered like this library's second \"major version zero\"â€”which is needed only because the 1.0 version of this library was stable and used in production for a while.\r\n\r\n# Example API\r\nCheck out the [full, working example repo](http://github.com/ethanresnick/json-api-example) for all the details on building an API with this library. Or, take a look at the basic example below:\r\n\r\n```javascript\r\n  var app = require('express')()\r\n    , API = require('json-api');\r\n\r\n  var models = {\r\n    \"Person\": require('./models/person'),\r\n    \"Place\": require('./models/place')\r\n  };\r\n\r\n  var registry = new API.ResourceTypeRegistry();\r\n  var adapter = new API.adapters.Mongoose(models);\r\n\r\n  registry.type(\"people\", {\r\n    adapter: adapter,\r\n    urlTemplates: {\r\n      \"self\": \"/people/{id}\"\r\n    }\r\n  });\r\n\r\n  registry.type(\"places\", {\r\n    adapter: adapter,\r\n    urlTemplates: {\"self\": \"/places/{id}\"}\r\n  });\r\n\r\n  // Initialize the automatic documentation.\r\n  // Note: don't do this til after you've registered all your resources.\r\n  var DocsController = new API.controllers.Documentation(registry, {name: 'Example API'});\r\n\r\n  // Set up our controllers\r\n  var APIController = new API.controllers.API(registry);\r\n  var Front = new API.controllers.Front(APIController, DocsController);\r\n  var requestHandler = Front.apiRequest.bind(Front);\r\n\r\n  // Add routes for basic list, read, create, update, delete operations\r\n  app.get(\"/:type(people|places)\", requestHandler);\r\n  app.get(\"/:type(people|places)/:id\", requestHandler);\r\n  app.post(\"/:type(people|places)\", requestHandler);\r\n  app.patch(\"/:type(people|places)/:id\", requestHandler);\r\n  app.delete(\"/:type(people|places)/:id\", requestHandler);\r\n\r\n  // Add routes for adding to, removing from, or updating resource relationships\r\n  app.post(\"/:type(people|places)/:id/links/:relationship\", requestHandler);\r\n  app.patch(\"/:type(people|places)/:id/links/:relationship\", requestHandler);\r\n  app.delete(\"/:type(people|places)/:id/links/:relationship\", requestHandler);\r\n\r\n\r\n  app.listen(3000);\r\n  ```\r\n\r\n# Core Concepts\r\n## Resource Type Descriptions <a name=\"resource-type-descriptions\"></a>\r\nThe JSON-API spec is built around the idea of typed resource collections. For example, you can have a `\"people\"` collection and a `\"companies\"` collection. (By convention, type names are plural and lowercase.)\r\n\r\nTo use this library, you describe the special behavior (if any) that resources of each type should have, and then register that description with a central `ResourceTypeRegistry`. Then the library takes care of the rest. A resource type description is simply an object with the following properties:\r\n\r\n- `urlTemplates`: an object containing url templates used to output the json for resources of the type being described. Currently, the supported keys are: \"self\", which defines the template used for building [resource urls](http://jsonapi.org/format/#document-structure-resource-urls) of that type, and \"relationhsip\", which defines the template that will be used for [relationship urls](http://jsonapi.org/format/#fetching-relationships).\r\n- `adapter`: the [adapter](#adapters) used to find and update these resources. By specifying this for each resource type, different resource types can live in different kinds of databases.\r\n\r\n- <a name=\"before-render\"></a>`beforeRender` (optional): a function called on each resource after it's found by the adapter but before it's sent to the client. This lets you do things like hide fields that some users aren't authorized to see.\r\n\r\n- <a name=\"before-save\"></a>`beforeSave` (optional): a function called on each resource provided by the client (i.e. in a `POST` or `PUT` request) before it's sent to the adapter for saving. You can transform the data here to make it valid.\r\n\r\n- <a name=\"labels\"></a>`labelMappers` (optional): this lets you create urls (or, in REST terminology, resources) that map to different database items over time. For example, you could have a `/events/upcoming` resource or a `/users/me` resource. In those examples, \"upcoming\" and \"me\" are called the labels and, in labelMappers, you provide a function that maps each label to the proper database id(s) at any given time. The function can return a Promise if needed.\r\n\r\n- <a name=\"parentType\"></a>`parentType` (optional): this allows you to designate one resource type being a sub-type of another (its `parentType`). This is often used when you have two resource types that live in the same database table/collection, and their type is determined with a discriminator key. See the [`schools` type](https://github.com/ethanresnick/json-api-example/blob/master/src/resource-descriptions/schools.js#L2) in the example repository.\r\n\r\n-  <a name=\"info\"></a>`info` (optional): this allows you to provide extra information about the resource that will be included in the documentation. Available properties are `\"description\"` (a string describing what resources of this type are) and `\"fields\"`. `\"fields\"` holds an object in which you can describe each field in the resource (e.g. listing validation rules). See the [example implemenation](https://github.com/ethanresnick/json-api-example/blob/master/src/resource-descriptions/schools.js) for more details.\r\n\r\n## Routing, Authentication & Controllers\r\nThis library gives you a Front controller (shown in the example) that can handle requests for API results or for the documentation. But the library doesn't prescribe how requests get to this controller. This allows you to use any url scheme, routing layer, or authentication system you already have in place. You just need to make sure that: `req.params.type` reflects the requested resource type; `req.params.id` or (if you want to allow labels on a request) `req.params.idOrLabel` reflects the requested id, if any; and `req.params.relationship` reflects the relationship name, in the event that the user is requesting a relationship url.\r\n\r\nIn the example above, routing is handled with Express's built-in `app[VERB]` methods, and the three parameters are set properly using express's built-in `:param` syntax. If you're looking for something more robust, you might be interested in [Express Simple Router](https://github.com/ethanresnick/express-simple-router). For authentication, check out [Express Simple Firewall](https://github.com/ethanresnick/express-simple-firewall).\r\n\r\n## Adapters\r\nAn adapter handles all the interaction with the database. It is responsible for turning requests into standard [`Resource`](https://github.com/ethanresnick/json-api/blob/master/src/types/Resource.js) or [`Collection`](https://github.com/ethanresnick/json-api/blob/master/src/types/Collection.js) objects that the rest of the library will use. See the built-in [MongooseAdapter](https://github.com/ethanresnick/json-api/blob/master/src/adapters/Mongoose/MongooseAdapter.js) for an example.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}