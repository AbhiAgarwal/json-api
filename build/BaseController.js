// Generated by LiveScript 1.2.0
(function(){
  var Q, mongoose, Document, Collection;
  Q = require('Q');
  mongoose = require('mongoose');
  Document = require('./types/Document');
  Collection = require('./types/Collection');
  module.exports = {
    /**
     * Returns an object with newProps as properties (all enumerable) 
     * and values and `this` in the prototype chain. Allows you create
     * controllers that extend this one.
     */
    extend: function(newProps){
      var k, v;
      return Object.create(this, (function(){
        var ref$, own$ = {}.hasOwnProperty, results$ = {};
        for (k in ref$ = newProps) if (own$.call(ref$, k)) {
          v = ref$[k];
          results$[k] = {
            value: v,
            enumerable: true
          };
        }
        return results$;
      }()));
    }
    /**
     * A function that, when called, returns a new object that implements 
     * the Adapter interface. Should be provided by the child controller.
     * Whe need to get a new adapter on each request so the query state is
     * specific to this request (since the controller objects themselves
     * persist between requests).
     */,
    adapterFn: null,
    _buildQuery: function(req){
      var query, ids;
      query = this.adapterFn();
      switch (req.method.toUpperCase()) {
      case "GET":
        if (req.params.id) {
          ids = req.params.id.split(",");
          if (ids.length > 1) {
            query.withIds(ids);
          } else {
            query.withId(ids[0]);
          }
        } else {
          query.any();
        }
        if (req.query.sort) {
          query.sort(req.query.sort.split(','));
        }
        if (req.query.fields) {
          query.onlyFields(req.query.fields.split(','));
        }
        break;
      case "POST":
        'something';
      }
      return query;
    },
    GET: function(req, res, next){
      var after;
      after = bind$(this, 'afterQuery');
      return this._buildQuery(req).promise().then(function(result){
        if (result instanceof Collection) {
          result.resources.map(function(it){
            return after(it, req, res);
          });
          return result;
        } else {
          return after(result, req, res);
        }
      }).then(function(resources){
        return new Document(resources).get();
      }).then(bind$(res, 'json'), bind$(res, 'json'));
    },
    POST: function(req, res, next){
      var before;
      before = bind$(this, 'beforeSave');
      return this._buildQuery(req).promise().then(function(){}, function(){});
    }
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
