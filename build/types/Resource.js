// Generated by LiveScript 1.2.0
(function(){
  var ResourceType, Resource, toString$ = {}.toString;
  ResourceType = require('./ResourceType');
  Resource = (function(){
    Resource.displayName = 'Resource';
    var prototype = Resource.prototype, constructor = Resource;
    function Resource(type, id, attrs, links, href){
      var ref$, this$ = this instanceof ctor$ ? this : new ctor$;
      this$.links = links;
      this$.href = href;
      ref$ = [type, id, attrs], this$.type = ref$[0], this$.id = ref$[1], this$.attrs = ref$[2];
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    Object.defineProperty(prototype, 'attrs', {
      get: function(){
        return this._attrs;
      },
      set: function(attrs){
        if (attrs != null) {
          if (toString$.call(attrs).slice(8, -1) !== 'Object') {
            throw new Error("attrs must be an object");
          }
          ["id", "type", "href", "links"].forEach(function(it){
            if (attrs[it] != null) {
              throw new Error(it + " is an ivalid attribute name");
            }
          });
        }
        this._attrs = attrs;
      },
      configurable: true,
      enumerable: true
    });
    Object.defineProperty(prototype, 'type', {
      get: function(){
        return this._type;
      },
      set: function(type){
        this._validateType(type);
        this._type = type;
      },
      configurable: true,
      enumerable: true
    });
    Object.defineProperty(prototype, 'id', {
      get: function(){
        return this._id;
      },
      set: function(id){
        if (id != null && !/^[A-Za-z0-9\-\_]+$/.test(id)) {
          throw new Error("Invalid id");
        }
        this._id = String(id).toString();
      },
      configurable: true,
      enumerable: true
    });
    prototype._validateType = function(type){
      if (type == null) {
        throw new Error("type is required");
      }
      if (!(type instanceof ResourceType)) {
        throw new Error("type must be a ResourceType instance");
      }
    };
    return Resource;
  }());
  module.exports = Resource;
}).call(this);
