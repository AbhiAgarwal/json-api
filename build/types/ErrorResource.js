// Generated by LiveScript 1.2.0
(function(){
  var Resource, ErrorResource;
  Resource = require('./Resource');
  ErrorResource = (function(superclass){
    var prototype = extend$((import$(ErrorResource, superclass).displayName = 'ErrorResource', ErrorResource), superclass).prototype, constructor = ErrorResource;
    function ErrorResource(type, id, attrs, links, href){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.links = links;
      this$.href = href;
      ErrorResource.superclass.apply(this$, arguments);
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype._validateType = function(type){
      if (type.name !== "errors") {
        throw new Error("type name must be errors");
      }
    };
    return ErrorResource;
  }(Resource));
  module.exports = ErrorResource;
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
