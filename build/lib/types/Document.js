// Generated by LiveScript 1.2.0
(function(){
  var Resource, Collection, prelude, Document;
  Resource = require('./Resource');
  Collection = require('./Collection');
  prelude = require('prelude-ls');
  Document = (function(){
    Document.displayName = 'Document';
    var prototype = Document.prototype, constructor = Document;
    function Document(resources, meta){
      this.resources = resources;
      this.meta = meta;
      this.linked = {};
      this.links = {};
    }
    prototype.addLinkedResource = function(resource){
      if (this.linked[resource.type] == null) {
        this.linked[resource.type] = [];
      }
      if (!in$(resource.id, this.linked[resource.type].map(function(it){
        return it.id;
      }))) {
        return this.linked[resource.type].push(resource);
      }
    };
    prototype.renderResource = function(resource){
      var res, path, ref$, referenced, isCollection, referencedResources, idKey, x$, this$ = this;
      res = resource.attrs;
      if (resource.id) {
        res.id = resource.id;
      }
      if (resource.links != null) {
        res.links = {};
      }
      for (path in ref$ = resource.links) {
        referenced = ref$[path];
        isCollection = referenced instanceof Collection;
        referencedResources = isCollection ? referenced.resources : referenced;
        idKey = isCollection ? 'ids' : 'id';
        x$ = res.links[path] = {};
        x$['type'] = referenced.type;
        x$[idKey] = referenced[idKey];
        if (referenced.href && referencedResources[0].attrs == null) {
          x$['href'] = referenced.href;
        }
        referencedResources.forEach(fn$);
      }
      return res;
      function fn$(it){
        if (it.attrs != null) {
          return this$.addLinkedResource(it);
        }
      }
    };
    prototype.get = function(){
      var x$, doc;
      x$ = doc = {};
      if (this.meta) {
        x$['meta'] = this.meta;
      }
      x$[this.resources.type] = this.resources instanceof Collection
        ? this.resources.resources.map(bind$(this, 'renderResource'))
        : this.renderResource(this.resources);
      if (!prelude.Obj.empty(this.linked)) {
        x$['linked'] = 'something';
      }
      if (!prelude.Obj.empty(this.links)) {
        x$['links'] = 'something';
      }
      return doc;
    };
    return Document;
  }());
  module.exports = Document;
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
