// Generated by LiveScript 1.2.0
(function(){
  var Resource, Collection, prelude, templating, flat, utils, Document;
  Resource = require('./Resource');
  Collection = require('./Collection');
  prelude = require('prelude-ls');
  templating = require('url-template');
  flat = require('flat');
  utils = require('../util/utils');
  Document = (function(){
    Document.displayName = 'Document';
    var prototype = Document.prototype, constructor = Document;
    function Document(primaryResources, extraResources, meta, urlTemplates){
      var res$, k, ref$, template, type, resources;
      this.primaryResources = primaryResources;
      this.meta = meta;
      this.urlTemplates = urlTemplates;
      this.links = {};
      res$ = {};
      for (k in ref$ = this.urlTemplates) {
        template = ref$[k];
        res$[k] = templating.parse(template);
      }
      this._urlTemplatesParsed = res$;
      this.linked = extraResources;
      for (type in ref$ = this.linked) {
        resources = ref$[type];
        this.linked[type] = resources.map(bind$(this, 'renderResource'));
      }
    }
    prototype.addLinkedResource = function(resource){
      if (this.linked[resource.type] == null) {
        this.linked[resource.type] = [];
      }
      if (!in$(resource.id, this.linked[resource.type].map(function(it){
        return it.id;
      }))) {
        return this.linked[resource.type].push(this.renderResource(resource));
      }
    };
    prototype.renderResource = function(resource){
      var res, urlTempParams, path, ref$, referenced, isCollection, idKey, referencedResources, x$, this$ = this;
      res = resource.attrs;
      if (resource.id) {
        res.id = resource.id;
      }
      urlTempParams = function(){
        return import$({}, res);
      }();
      if (resource.links != null) {
        res.links = {};
      }
      for (path in ref$ = resource.links) {
        referenced = ref$[path];
        isCollection = referenced instanceof Collection;
        idKey = isCollection ? 'ids' : 'id';
        referencedResources = isCollection
          ? referenced.resources
          : [referenced];
        if (!referencedResources[0]) {
          continue;
        }
        x$ = res.links[path] = {};
        x$['type'] = referenced.type;
        x$[idKey] = referenced[idKey];
        if (referencedResources[0].attrs == null) {
          x$['href'] = referenced.href || this.urlFor(resource.type, path, referenced[idKey], urlTempParams);
        }
        referencedResources.forEach(fn$);
      }
      return res;
      function fn$(it){
        if (it.attrs != null) {
          return this$.addLinkedResource(it);
        }
      }
    };
    prototype.urlFor = function(type, path, referencedIdOrIds, extraParams){
      var params, k, v;
      if (!this._urlTemplatesParsed[type + '.' + path]) {
        throw new Error("Missing url template for " + type + '.' + path);
      }
      params = flat.flatten((function(){
        var ref$, results$ = {};
        for (k in ref$ = extraParams) {
          v = ref$[k];
          results$[type + '.' + k] = v;
        }
        return results$;
      }()), {
        safe: true
      });
      params[type + '.' + path] = referencedIdOrIds;
      return this._urlTemplatesParsed[type + '.' + path].expand(params);
    };
    prototype.get = function(){
      var x$, doc, this$ = this;
      x$ = doc = {};
      if (this.meta) {
        x$['meta'] = this.meta;
      }
      x$[this.primaryResources.type] = function(){
        var isCollection, renderedResources;
        isCollection = this$.primaryResources instanceof Collection;
        renderedResources = utils.mapResources(this$.primaryResources, bind$(this$, 'renderResource'));
        if (isCollection) {
          renderedResources.forEach(function(it){
            var i$, results$ = [];
            if (it.links != null) {
              for (i$ in it.links) {
                results$.push((fn$.call(this$, i$, it.links[i$])));
              }
              return results$;
            }
            function fn$(path, link){
              var templateKey, x$;
              templateKey = this.primaryResources.type + '.' + path;
              if (!this.links[templateKey]) {
                x$ = this.links[templateKey] = {};
                x$['type'] = link.type;
                if (it.links[path].href) {
                  x$['href'] = this.urlTemplates[templateKey];
                }
              }
              return it.links[path] = it.links[path].ids || it.links[path].id;
            }
          });
        }
        return renderedResources;
      }();
      if (!prelude.Obj.empty(this.linked)) {
        x$['linked'] = this.linked;
      }
      if (!prelude.Obj.empty(this.links)) {
        x$['links'] = this.links;
      }
      return doc;
    };
    Document.primaryResourcesfromJSON = function(doc){
      var links, meta, linked, buildResource, key, primaryResources, makeCollection, type;
      links = doc.links, meta = doc.meta, linked = doc.linked;
      buildResource = function(json, type, linked, topLinks){
        var id, href, links, attrs, key, val, linkedType, ref$, linkedIdOrIds, linkedResourceOrResources;
        id = json.id;
        delete json.id;
        href = json.href;
        delete json.href;
        links = json.links;
        delete json.links;
        type = json.type || type;
        delete json.type;
        attrs = json;
        for (key in links) {
          val = links[key];
          linkedType = val.type || ((ref$ = val[0]) != null ? ref$.type : void 8) || (topLinks != null ? (ref$ = topLinks[type + '.' + key]) != null ? ref$.type : void 8 : void 8);
          linkedIdOrIds = typeof val === "string"
            ? val
            : val.id
              ? val.id
              : val instanceof Array
                ? val.map(fn$)
                : val.ids;
          linkedResourceOrResources = utils.mapArrayOrVal(linkedIdOrIds, fn1$);
          links[key] = linkedResourceOrResources instanceof Array ? new Collection(linkedResourceOrResources) : linkedResourceOrResources;
        }
        return new Resource(type, id, attrs, links, href);
        function fn$(it){
          return it.id || it;
        }
        function fn1$(id){
          return new Resource(linkedType, id);
        }
      };
      for (key in doc) {
        if (key !== 'links' && key !== 'meta' && key !== 'linked') {
          primaryResources = doc[key];
          makeCollection = primaryResources instanceof Array;
          type = fn$();
          break;
        }
      }
      if (!makeCollection) {
        primaryResources = [primaryResources];
      }
      primaryResources = primaryResources.map(function(it){
        return buildResource(it, type, linked, links);
      });
      if (makeCollection) {
        return new Collection(primaryResources, null, type);
      } else {
        return primaryResources[0];
      }
      function fn$(){
        if (key !== 'data') {
          return key;
        }
        if (makeCollection) {
          return primaryResources[0].type;
        } else {
          return primaryResources.type;
        }
      }
    };
    return Document;
  }());
  module.exports = Document;
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
