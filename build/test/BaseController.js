// Generated by LiveScript 1.2.0
(function(){
  var mocha, sinon, chai, BaseController, ErrorResource, Collection, expect, it2, resSpy;
  mocha = require('mocha');
  sinon = require('sinon');
  chai = require('chai');
  BaseController = require('../lib/BaseController');
  ErrorResource = require('../lib/types/ErrorResource');
  Collection = require('../lib/types/Collection');
  expect = chai.expect;
  it2 = it;
  resSpy = {
    json: sinon.spy(function(status, body){
      return status;
    }),
    set: sinon.spy()
  };
  describe("Base Controller", function(){
    beforeEach(function(){
      resSpy.json.reset();
      return resSpy.set.reset();
    });
    describe("extend", function(){
      return it2("returns a new object with the provided properties and `this` as the prototype", function(){
        var orig, new1, new2;
        orig = {
          'base': function(it){
            return it;
          },
          'subclasses': {}
        };
        new1 = BaseController.extend.call(orig, "type", {
          'my2': function(it){
            return it;
          }
        });
        new2 = BaseController.extend("type", {
          'my3': true
        });
        expect(new1.__proto__ === orig).to.be['true'];
        expect(new1.my2).to.be.a('function');
        expect(new2.__proto__ === BaseController).to.be['true'];
        return expect(new2.my3).to.be['true'];
      });
    });
    describe("sendResources", function(){
      it2("uses the error's status as response status code if passed an error resource", function(){
        BaseController.sendResources(resSpy, new ErrorResource(null, {
          'status': 411
        }));
        BaseController.sendResources(resSpy, new ErrorResource(null, {
          'status': 408
        }));
        expect(resSpy.json.firstCall.args).to.have.length(2);
        expect(resSpy.json.secondCall.args).to.have.length(2);
        expect(resSpy.json.firstCall.args[0]).to.equal(411);
        expect(resSpy.json.secondCall.args[0]).to.equal(408);
        return expect(resSpy.json.firstCall.args[1]).to.be.an("object");
      });
      it2("should send the response with the proper mime type", function(){
        BaseController.sendResources(resSpy, new ErrorResource(null, {
          'status': 408
        }));
        return expect(resSpy.set.calledWith("Content-Type", "application/vnd.api+json")).to.be['true'];
      });
      return it2("calls `pickStatus` to figure out the appopriate response status code if passed a collection of error resources", function(){
        var coll, pickStatusSpy;
        coll = new Collection([
          new ErrorResource(null, {
            'status': 411
          }), new ErrorResource(null, {
            'status': 408
          })
        ]);
        pickStatusSpy = sinon.spy(BaseController, "_pickStatus");
        BaseController.sendResources(resSpy, coll);
        expect(pickStatusSpy.callCount).to.equal(1);
        expect(pickStatusSpy.calledWith([411, 408])).to.be['true'];
        expect(resSpy.json.firstCall.args).to.have.length(2);
        expect(resSpy.json.firstCall.args[1]).to.be.an("object");
        return BaseController._pickStatus.restore();
      });
    });
    describe("JSON body parsing", function(){
      it2.skip("sends a 415 error for invalid character encodings", function(){});
      it2.skip("sends a 400 error that says resource is required for an empty json body", function(){});
      return it2.skip("sends a 400 invalid json error for any other json syntax errors", function(){});
    });
    return describe("", function(){});
  });
}).call(this);
