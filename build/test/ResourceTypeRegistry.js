// Generated by LiveScript 1.2.0
(function(){
  var mocha, sinon, chai, ResourceTypeRegistry, expect, it2, registry, makeGetterSetterTest;
  mocha = require('mocha');
  sinon = require('sinon');
  chai = require('chai');
  ResourceTypeRegistry = require('../lib/ResourceTypeRegistry');
  expect = chai.expect;
  it2 = it;
  registry = {};
  makeGetterSetterTest = function(newThing, type, methodName, deep){
    return function(){
      expect(registry[methodName](type)).to.be.undefined;
      registry[methodName](type, newThing);
      if (deep) {
        return expect(registry[methodName](type)).to.deep.equal(newThing);
      } else {
        return expect(registry[methodName](type)).to.equal(newThing);
      }
    };
  };
  describe("ResourceTypeRegistry", function(){
    beforeEach(function(){
      return registry = new ResourceTypeRegistry();
    });
    describe("type", function(){
      var description;
      description = {
        adapter: {},
        beforeSave: function(){},
        afterQuery: function(){},
        info: {},
        urlTemplates: {
          'mytypes.path': 'test template'
        }
      };
      return it2("should be a getter/setter for a type", makeGetterSetterTest(description, "mytypes", "type", true));
    });
    describe("adapter", function(){
      return it2("should be a getter/setter for a type's adapter", makeGetterSetterTest({
        'a': 'new model'
      }, "mytypes", "adapter"));
    });
    describe("beforeSave", function(){
      return it2("should be a getter/setter for a type for a type's beforeSave", makeGetterSetterTest(function(){}, "mytypes", "beforeSave"));
    });
    describe("afterQuery", function(){
      return it2("should be a getter/setter for a type's afterQuery", makeGetterSetterTest(function(){}, "mytypes", "afterQuery"));
    });
    describe("info", function(){
      return it2("should be a getter/setter for a type's info", makeGetterSetterTest({}, "mytypes", "info"));
    });
    return describe("urlTemplates", function(){
      it2("should be a getter/setter for a type's urlTemplates", makeGetterSetterTest({
        'mytypes.path': 'test template'
      }, "mytypes", "urlTemplates", true));
      return it2("should reject invalid urlTemplates", function(){
        var newTemps;
        newTemps = {
          'unscoped.path': 'new template'
        };
        return expect(function(){
          return registry.urlTemplates("mytypes", newTemps);
        }).to['throw'](Error);
      });
    });
  });
}).call(this);
