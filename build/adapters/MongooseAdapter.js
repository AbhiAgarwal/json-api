// Generated by LiveScript 1.2.0
(function(){
  var mongoose, MongooseQueryBuilder, MongooseAdapter, toString$ = {}.toString;
  mongoose = require('mongoose');
  MongooseQueryBuilder = (function(){
    MongooseQueryBuilder.displayName = 'MongooseQueryBuilder';
    var prototype = MongooseQueryBuilder.prototype, constructor = MongooseQueryBuilder;
    function MongooseQueryBuilder(model, options){
      this.model = model;
      this.options = options;
      this.refPaths = [];
      this.model.schema.eachPath(function(name, type){
        if (type.options.ref != null) {
          return this.refPaths.push(name);
        }
      });
      this.queryBuilder = new mongoose.Query(null, null, this.model, this.model.collection);
    }
    prototype.withIds = function(ids){
      return this.queryBuilder['in']('id', toString$.call(ids).slice(8, -1) === 'Array'
        ? ids
        : [ids]);
    };
    prototype.withProperty = function(prop, val){
      return this.queryBuilder.where({
        prop: val
      });
    };
    prototype.onlyFields = function(fields){
      return this.queryBuilder.select(fields.join(' '));
    };
    prototype.includeLinked = function(paths){
      this.refPaths.forEach(function(it){
        var i$, ref$, len$, i, path, pathExtra, x$, results$ = [];
        for (i$ = 0, len$ = (ref$ = paths).length; i$ < len$; ++i$) {
          i = i$;
          path = ref$[i$];
          if (path.substr(0, it.length) === it) {
            pathExtra = path.substr(it.length + 1);
            this.queryBuilder.populate((x$ = {}, x$.path = it, pathExtra && (x$.select = pathExtra), x$));
            paths.splice(i, 1);
            continue;
          }
        }
        return results$;
      });
      if (paths.length) {
        paths.forEach(function(it){
          return this.queryBuilder.populate({
            path: it
          });
        });
      }
      return {
        /**
         * @param sorts array An array of field names to sort on.
         * Ascending is the default sort; prefix the field name with
         * a - to sort descending.
         */
        sort: function(sorts){
          return this.queryBuilder.sort(sorts.join(' '));
        }
      };
    };
    return MongooseQueryBuilder;
  }());
  MongooseAdapter = (function(){
    MongooseAdapter.displayName = 'MongooseAdapter';
    var prototype = MongooseAdapter.prototype, constructor = MongooseAdapter;
    function MongooseAdapter(model, before, a){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.model = model;
      this$.before = before;
      this$.a = a;
      this$.qb = new MongooseQueryBuilder(this$.model);
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.query = function(){
      return this.qb;
    };
    return MongooseAdapter;
  }());
  module.exports = MongooseAdapter;
}).call(this);
